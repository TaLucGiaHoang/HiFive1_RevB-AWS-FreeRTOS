/*
 * hello.c
 *
 *  Created on: Oct 28, 2019
 *      Author: HoangSHC
 */


/* Copyright 2019 SiFive, Inc */
/* SPDX-License-Identifier: Apache-2.0 */

#include <stdio.h>
#include <string.h>
#include <time.h>
#include <metal/led.h>
#include <metal/gpio.h>
#include <metal/timer.h>
#include <metal/spi.h>
#include <metal/clock.h>

/* Kernel includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "timers.h"
#include "semphr.h"

/* FE310-G002 GPIO pin */
#define ESP_CS	9
#define BLUE	21
#define GREEN	19
#define RED		22
#define LED_ON   0
#define LED_OFF  1
#define WF_INT	10


#define METAL_SPI_CSMODE_MASK         3
#define METAL_SPI_CSMODE_AUTO         0
#define METAL_SPI_CSMODE_HOLD         2
#define METAL_SPI_CSMODE_OFF          3


#define METAL_SPI_RXDATA_TIMEOUT      1
#define METAL_SPI_TXDATA_FULL         (1 << 31)
#define METAL_SPI_RXDATA_EMPTY        (1 << 31)
#define METAL_SPI_TXRXDATA_MASK       (0xFF)

typedef struct {
    volatile uint32_t sckdiv;           /* 0x00 Serial clock divisor register */
    volatile uint32_t sckmode;          /* 0x04 Serial clock mode register */
    volatile uint32_t reserved0[2];     /* 0x08 ~ 0x0c Reserved  */
    volatile uint32_t csid;             /* 0x10 Chip select ID register */
    volatile uint32_t csdef;            /* 0x14 Chip select default register */
    volatile uint32_t csmode;           /* 0x18 Chip select mode register */
    volatile uint32_t reserved1[3];     /* 0x1c ~ 0x24 Reserved  */
    volatile uint32_t delay0;           /* 0x28 Delay control 0 register */
    volatile uint32_t delay1;           /* 0x2c Delay control 1 register */
    volatile uint32_t reserved2[4];     /* 0x30 ~ 0x3c Reserved  */
    volatile uint32_t fmt;              /* 0x40 Frame format register */
    volatile uint32_t reserved3[1];     /* 0x44 Reserved  */
    volatile uint32_t txdata;           /* 0x48 Tx FIFO Data register */
    volatile uint32_t rxdata;           /* 0x4c Rx FIFO data register */
    volatile uint32_t txmark;           /* 0x50 Tx FIFO watermark register */
    volatile uint32_t rxmark;           /* 0x54 Rx FIFO watermark register */
    volatile uint32_t reserved4[2];     /* 0x58 ~ 0x5c Reserved  */
    volatile uint32_t fctrl;            /* 0x60 SPI flash interface control register */
    volatile uint32_t ffmt;             /* 0x64 SPI flash instruction format register */
    volatile uint32_t reserved5[2];     /* 0x68 ~ 0x6c Reserved  */
    volatile uint32_t ie;               /* 0x70 SPI interrupt enable register */
    volatile uint32_t ip;               /* 0x74 SPI interrupt pending register */
} SPI_RegDef;
#define SPI1_BASE               (volatile uint32_t*)(0x10024000)
#define DEV_SPI1              ((SPI_RegDef *)  SPI1_BASE)
// DEV_SPI1->rxdata = 0x55;


struct metal_gpio* gpio1;

struct metal_spi *spi;

//const struct metal_clock *clk;

#define spi_txdata        *(volatile uint32_t*)0x10024048
#define spi_rxdata        *(volatile uint32_t*)0x1002404C
#define spi_csmode        *(volatile uint32_t*)0x10024018
// #define gpio_output_val          *(volatile uint32_t*)0x1001200C
// #define spi_csdef         *(volatile uint32_t*)0x10024014
#define spi_delay0        *(volatile uint32_t*)0x10024028
#define spi_txmark    *(volatile uint32_t*)0x10024050
#define spi_rxmark    *(volatile uint32_t*)0x10024054
#define spi_ie        *(volatile uint32_t*)0x10024070
#define spi_ip        *(volatile uint32_t*)0x10024074
#define gpio_input_val *(volatile uint32_t*)0x10012000 // Pin value register
#define gpio_input_en  *(volatile uint32_t*)0x10012004 // Pin input enable register

char rx_buf[32];
char cmd_len_buf[4];
char rec_cmd[] = {0x01, 0x00, 0x00, 0x00};
int16_t cmd_len;
uint32_t temp;
uint32_t timeout;




static void delay_s(int time);

static void delay(int number_of_seconds) //not actually number of seconds
{
    int milli_seconds = 1000 * number_of_seconds;
    clock_t start_time = clock();
    while (clock() < start_time + milli_seconds);
//	for(int i = 0; i < number_of_seconds; i++)
//	{
//
//	}
}
static char send_cmd(char* cmd);
static char get_esp(void);
static char get_data_esp(void);

static void input_enable(char pin);
static uint32_t get_input_val(char pin);
static void init_led(struct metal_gpio *gpio);
static void init_spi1(void)
{
//	spi_txmark = 1;
//	spi_rxmark = 0;
//	spi_ie = 3;
//	input_enable(WF_INT);

	gpio_input_en |= 1<<WF_INT; // Set GPIO10 of FE310-G002 to input
	DEV_SPI1->txmark = 1; // Reset value
	DEV_SPI1->rxmark = 0; // Reset value
	DEV_SPI1->ie = 3;

//	(*(volatile uint32_t*)(0x10012004)) |= 1 << 10; // Set GPIO10 to input for Wifi interrupt (WF_INT)
//	(*(volatile uint32_t*)(0x10024070)) = 3;  // SPI1 interrupts enable
}

int spi1_transfer(size_t len, char *tx_buf, char *rx_buf)
{

//	(volatile uint32_t*)(0x10024000)
	volatile uint32_t spi1_cs_mode = *((volatile uint32_t*)(0x10024018));
	volatile uint32_t spi1_txdata = *((volatile uint32_t*)(0x10024048));
	volatile uint32_t spi1_rxdata = *((volatile uint32_t*)(0x1002404C));
//    volatile uint32_t control_base = METAL_SIFIVE_SPI0_10024000_BASE_ADDRESS;
    int rc = 0;

//    rc = configure_spi1(spi, config);
//    if(rc != 0) {
//        return rc;
//    }

    ////////////////////
	char abc[] = {0x02, 0x00, 0x00, 0x00};
	char xyz[] = {len, 0x00, 0x00, 0x41};
	/* send 2-0-0-0 */
	spi_csmode = 2;
	spi_delay0 &= 0xFF00FFFF;
	for(int i = 0; i<4; i ++)
	{
		spi_txdata = abc[i];
		temp = (spi_rxdata);
	}
	while(!(spi_ip & 1));
	spi_csmode = 0;
	delay(500);

	spi_csmode = 2;
	spi_delay0 &= 0xFF00FFFF;
	while(!get_input_val(WF_INT));
	/* send length */
	for(int i = 0; i<4; i ++)
	{
		spi_txdata = xyz[i];
		temp = (spi_rxdata);
		while(!(spi_ip & 1));
	}
	spi_csmode = 0;

	delay(100);
	timeout = 0;
	while(!get_input_val(WF_INT))
	{
		delay(10);
		if(timeout++>1000)
		{
			printf("co timeout\n");
			return 1;
		}
	}
    ////////////////////
    /* Hold the chip select line for all len transferred */
    spi1_cs_mode &= ~(METAL_SPI_CSMODE_MASK);
    spi1_cs_mode |= METAL_SPI_CSMODE_HOLD;

    unsigned long rxdata;

    /* Declare time_t variables to break out of infinite while loop */
    time_t endwait;

    for(size_t i = 0; i < len; i++) {
        /* Master send bytes to the slave */

        /* Wait for TXFIFO to not be full */
        while (spi1_txdata & METAL_SPI_TXDATA_FULL);

        /* Transfer byte by modifying the least significant byte in the TXDATA register */
        if (tx_buf) {
        	spi1_txdata = (volatile uint32_t)tx_buf[i];
        } else {
            /* Transfer a 0 byte if the sending buffer is NULL */
        	spi1_txdata = 0;
        }

        /* Master receives bytes from the RX FIFO */

        /* Wait for RXFIFO to not be empty, but break the nested loops if timeout
         * this timeout method  needs refining, preferably taking into account
         * the device specs */
        endwait = time(NULL) + METAL_SPI_RXDATA_TIMEOUT;

        while ((rxdata = spi1_rxdata) & METAL_SPI_RXDATA_EMPTY) {
            if (time(NULL) > endwait) {
                /* If timeout, deassert the CS */
            	spi1_cs_mode &= ~(METAL_SPI_CSMODE_MASK);

                /* If timeout, return error code 1 immediately */
                return 1;
            }
        }

        /* Only store the dequeued byte if the receive_buffer is not NULL */
        if (rx_buf) {
            rx_buf[i] = (char) (rxdata & METAL_SPI_TXRXDATA_MASK);
        }
    }

    spi1_cs_mode &= ~(METAL_SPI_CSMODE_MASK);

    return 0;
}

#include "sifive_spi1.h"
#define SPI_FREQUENCY 2000000
int main_hello(void)
{
//	printf("Start Programe1\n");
//
//	/* Initialize LED REG, GREEN, BLUE */
//	init_led(gpio1);

	init_spi1();

//	spi1_test();

////	spi_csmode = 0;
////	uint32_t* csid = 0x10024010;
//
////	send_cmd("AT\r\n");
////	while(!get_input_val(WF_INT));
////	get_data_esp();


	send_cmd("AT\r\n");
	while(!get_input_val(WF_INT));
	get_data_esp();

	send_cmd("AT+CWMODE=1\r\n");
	while(!get_input_val(WF_INT));
	get_data_esp();

//	send_cmd("AT+CWJAP=\"SHCVN02\",\"khongduoc\"\r\n");
//	while(!get_input_val(WF_INT));
//	get_data_esp();
//	while(!get_input_val(WF_INT));
//	get_data_esp();
//	while(!get_input_val(WF_INT));
//	get_data_esp();

//	spi1_transfer(strlen("AT+CWJAP=\"SHCVN02\",\"khongduoc\"\r\n"), "AT+CWJAP=\"SHCVN02\",\"khongduoc\"\r\n", 0);
	while(1)
	{
//		while(send_cmd("AT+CIPSTART=\"TCP\",\"hifivedemo.s3-ap-southeast-1.amazonaws.com\",80,2\r\n"));
//		timeout = 0;
//		printf("abcxyz\n");
//		while(!get_input_val(WF_INT))
//		{
//			delay(2000);
//			timeout++;
//			if(timeout > 100)
//			{
//				goto X;
//			}
//		}
//		get_data_esp();
//		while(!get_input_val(WF_INT));
//		get_data_esp();
//
//		send_cmd("AT+CIPSEND=76\r\n");
//		timeout = 0;
//		while(!get_input_val(WF_INT))
//		{
//			delay(2000);
//			timeout++;
//			if(timeout > 100)
//			{
//				goto X;
//			}
//		}
//		get_data_esp();
//		timeout = 0;
//		while(!get_input_val(WF_INT))
//		{
//			delay(200);
//			timeout++;
//			if(timeout > 100)
//			{
//				goto X;
//			}
//		}
//		get_data_esp();
//		send_cmd("GET /data.txt HTTP/1.1\r\nHost: hifivedemo.s3-ap-southeast-1.amazonaws.com\r\n\r\n");
//		printf("get data 1\n");
//		timeout = 0;
//		while(!get_input_val(WF_INT))
//		{
//			delay(200);
//			timeout++;
//			if(timeout > 100)
//			{
//				goto X;
//			}
//		}
//		get_data_esp();
//		printf("get data 2\n");
//		timeout = 0;
//		while(!get_input_val(WF_INT))
//		{
//			delay(200);
//			timeout++;
//			if(timeout > 100)
//			{
//				goto X;
//			}
//		}
//		get_data_esp();
//		printf("get data 3\n");
//		timeout = 0;
//		while(!get_input_val(WF_INT))
//		{
//			delay(2000);
//			timeout++;
//			if(timeout > 100)
//			{
//				goto X;
//			}
//		}
//		switch (get_esp())
//		{
//			case 0:
//			{
//				printf("get data 4\n");
//				switch (get_data_esp())
//				{
//					case 2:
//					{
//						metal_gpio_set_pin(gpio1, RED, 0);
//						metal_gpio_set_pin(gpio1, GREEN, 1);
//						metal_gpio_set_pin(gpio1, BLUE, 1);
//						break;
//					}
//					case 3:
//					{
//						metal_gpio_set_pin(gpio1, RED, 1);
//						metal_gpio_set_pin(gpio1, GREEN, 0);
//						metal_gpio_set_pin(gpio1, BLUE, 1);
//						break;
//					}
//					case 4:
//					{
//						metal_gpio_set_pin(gpio1, RED, 1);
//						metal_gpio_set_pin(gpio1, GREEN, 1);
//						metal_gpio_set_pin(gpio1, BLUE, 0);
//						break;
//					}
//				}
//				break;
//			}
//			case 1:
//			{
//				metal_gpio_set_pin(gpio1, RED, 0);
//				metal_gpio_set_pin(gpio1, GREEN, 1);
//				metal_gpio_set_pin(gpio1, BLUE, 1);
//				break;
//			}
//			case 2: {
//				metal_gpio_set_pin(gpio1, RED, 1);
//				metal_gpio_set_pin(gpio1, GREEN, 0);
//				metal_gpio_set_pin(gpio1, BLUE, 1);
//				break;
//			}
//			case 3: {
//				metal_gpio_set_pin(gpio1, RED, 1);
//				metal_gpio_set_pin(gpio1, GREEN, 1);
//				metal_gpio_set_pin(gpio1, BLUE, 0);
//				break;
//			}
//		}
////		timeout = 0;
////		while(!get_input_val(WF_INT))
////		{
////			delay(500);
////			timeout++;
////			if(timeout > 100)
////			{
////				goto X;
////			}
////		}
//
//		printf("finish getting data\n");
//		while(send_cmd("AT+CIPCLOSE\r\n"));
//		timeout = 0;
//		while(!get_input_val(WF_INT));
//
//		if(get_data_esp() != 1)
//		{
//			if(0)
//			{
//X:				printf("TIMEOUT\n");
//			}
//			while(!get_input_val(WF_INT));
//			get_data_esp();
//		}
	}
}

static char send_cmd(char* cmd)
{
	int len = strlen(cmd);
	char abc[] = {0x02, 0x00, 0x00, 0x00};
	char xyz[] = {len, 0x00, 0x00, 0x41};
	printf("%s\n", cmd);
	/* send 2-0-0-0 */
	spi_csmode = 2;
	spi_delay0 &= 0xFF00FFFF;
	for(int i = 0; i<4; i ++)
	{
		spi_txdata = abc[i];
		temp = (spi_rxdata);
	}
	while(!(spi_ip & 1));
	spi_csmode = 0;
	delay(500);

	spi_csmode = 2;
	spi_delay0 &= 0xFF00FFFF;
	while(!get_input_val(WF_INT));
	/* send length */
	for(int i = 0; i<4; i ++)
	{
		spi_txdata = xyz[i];
		temp = (spi_rxdata);
		while(!(spi_ip & 1));
	}
	spi_csmode = 0;

	delay(100);
	timeout = 0;
	while(!get_input_val(WF_INT))
	{
		delay(10);
		if(timeout++>1000)
		{
			printf("co timeout\n");
			return 1;
		}
	}

	spi_delay0 &= 0xFF00FFFF;
	spi_csmode = 2;
	for (int i = 0; i < len; i ++)
	{
		spi_txdata = cmd[i];
//		while (spi_txdata & METAL_SPI_TXDATA_FULL);
		temp = (spi_rxdata);
//		while (temp & METAL_SPI_TXDATA_FULL)
//		{
//			temp = (spi_rxdata);
//			if(!get_input_val(WF_INT))
//			{
//				spi_csmode = 0;
//				break;
//			}
//		}
		while(!(spi_ip & 1));
	}
	spi_csmode = 0;
	delay(10000);
	return 0;
}

static char get_esp(void)
{

	cmd_len = 0;
	memset(rx_buf, 0, 32);
	spi_delay0 &= 0xFF00FFFF;

	while((spi_ip & 2) == 2)
	{
		temp = spi_rxdata;
		printf("abc\n");
	}
	spi_csmode = 2;
	for(int i = 0; i < 4; i++)
	{
		while (spi_txdata & METAL_SPI_TXDATA_FULL);
		spi_txdata = rec_cmd[i];
	}
	while(!(spi_ip & 1));
	spi_csmode = 0;

	while((spi_ip & 2) == 2)
	{
		temp = spi_rxdata;
		printf("[FIFO data]: %d\n", temp);
	}

	while(!get_input_val(WF_INT));
	delay(100);

	spi_delay0 &= 0xFF00FFFF;
	spi_csmode = 2;
	for(int i = 0; i < 4; i ++)
	{
		while (spi_txdata & METAL_SPI_TXDATA_FULL);
		spi_txdata = 0;
		while(!(spi_ip & 1));
	}
	spi_csmode = 0;
	while(!get_input_val(WF_INT));
	delay(100);

	char count = 0;
	while((spi_ip & 2) == 2)
	{
		rx_buf[count] = (spi_rxdata);
		printf("[FIFO data]: %d\n", rx_buf[count]);
		count++;
	}
	cmd_len = rx_buf[0] + rx_buf[1]*128;
	printf("[0]: %d,[1]: %d,[2]: %d,[3]: %d\n", rx_buf[0], rx_buf[1], rx_buf[2], rx_buf[3]);
	printf("[lenght]: %d\n", cmd_len);
	delay(10);
	spi_delay0 &= 0xFF00FFFF;
	spi_csmode = 2;
//	char keepdata = 0;
	for(int i = 0; i < cmd_len - 4; i ++)
	{
		while (spi_txdata & METAL_SPI_TXDATA_FULL);
		spi_txdata = 0;
	}
	while(!(spi_ip & 1));
	while((spi_ip & 2) == 2)
	{
		temp = spi_rxdata;
		printf("abc\n");
	}
	for(int i = 0; i < 4; i++)
	{
		while (spi_txdata & METAL_SPI_TXDATA_FULL);
		spi_txdata = 0;
	}
	while(!(spi_ip & 1));
	spi_csmode = 0;
	memset(rx_buf, 0, 32);
	count = 0;
	while((spi_ip & 2) == 2)
	{
		rx_buf[count] = (spi_rxdata);
		printf("[FIFO data]: %d\n", rx_buf[count]);
		count++;
	}
	if(strcmp(rx_buf, "\r\n\r\n") == 0)
	{
		printf("[test]: detect/r/n\n");
		return 0;
	}
	else if(strcmp(rx_buf, "LEDR") == 0)
	{
		printf("[test]: detect LEDR\n");
		return 1;
	}
	else if(strcmp(rx_buf, "LEDG") == 0)
	{
		printf("[test]: detect LEDG\n");
		return 2;
	}
	else if(strcmp(rx_buf, "LEDB") == 0)
	{
		printf("[test]: detect LEDB\n");
		return 3;
	}
	return 0;
}
static char get_data_esp(void)
{
	cmd_len = 0;
	memset(rx_buf, 0, 32);
	spi_delay0 &= 0xFF00FFFF;

	/* read data from FIFO to reset FIFO */
	while((spi_ip & 2) == 2)
	{
		temp = spi_rxdata;
		while ((temp & METAL_SPI_TXDATA_FULL) == METAL_SPI_TXDATA_FULL)
		{
			temp = spi_rxdata;
		}
	}

	/* start to send 1-0-0-0 */
	spi_csmode = 2;
	for(int i = 0; i < 4; i++)
	{
		while (spi_txdata & METAL_SPI_TXDATA_FULL);
		spi_txdata = rec_cmd[i];
	}
	while(!(spi_ip & 1));
	spi_csmode = 0;

	/* start to read FIFO data to reset FIFO */
	while((spi_ip & 2) == 2)
	{
		temp = spi_rxdata;
		while ((temp & METAL_SPI_TXDATA_FULL) == METAL_SPI_TXDATA_FULL)
		{
			temp = spi_rxdata;
		}
		printf("[FIFO]: 0x%02x\n", temp);
	}
	/* end to read FIFO data */

	while(!get_input_val(WF_INT));
	delay(100);

	/* start to send 0-0-0-0 to get length */
	while(!(spi_ip & 1));
	spi_csmode = 2;
	for(int i = 0; i < 4; i ++)
	{
		spi_txdata = 0;
		while(!(spi_ip & 1));
	}
	spi_csmode = 0;

	/* get length data from FIFO */
	char count = 0;
	while((spi_ip & 2) == 2)
	{
		rx_buf[count] = (spi_rxdata);
		while ((rx_buf[count] & METAL_SPI_TXDATA_FULL))
		{
			rx_buf[count] = (spi_rxdata);
		}
		printf("[FIFO]: 0x%02x\n", rx_buf[count]);
		count++;
	}
	printf("[debug]: count: %d\n", count);
	if(rx_buf[3] == 66)
	{
		cmd_len = rx_buf[0] + rx_buf[1]*128;
		printf("[length]: %d\n", cmd_len);
	}
	else
	{
		printf("[ERROR]: get length failed\n");
		printf("[0]: %d,[1]: %d,[2]: %d,[3]: %d, [4]: %d\n", rx_buf[0], rx_buf[1], rx_buf[2], rx_buf[3], rx_buf[4]);
		return -1;
	}

	memset(rx_buf, 0, 32);
	while(!get_input_val(WF_INT));

	delay(100);

	spi_delay0 &= 0xFF00FFFF;
	spi_csmode = 2;
	for(int i = 0; i < cmd_len - 4; i ++)
	{
		while (spi_txdata & METAL_SPI_TXDATA_FULL);
		spi_txdata = 0;
	}
	while(!(spi_ip & 1));
	while((spi_ip & 2) == 2)
	{
		temp = spi_rxdata;
		printf("abc\n");
	}
	for(int i = 0; i < 4; i++)
	{
		while (spi_txdata & METAL_SPI_TXDATA_FULL);
		spi_txdata = 0;
	}
	while(!(spi_ip & 1));
	spi_csmode = 0;
	memset(rx_buf, 0, 32);
	count = 0;
	while((spi_ip & 2) == 2)
	{
		rx_buf[count] = (spi_rxdata);
		printf("[FIFO data]: %d\n", rx_buf[count]);
		count++;
	}

	if(strcmp(rx_buf, "LEDR") == 0)
	{
		printf("[test]: detect LEDR\n");
		return 2;
	}
	else if(strcmp(rx_buf, "LEDG") == 0)
	{
		printf("[test]: detect LEDG\n");
		return 3;
	}
	else if(strcmp(rx_buf, "LEDB") == 0)
	{
		printf("[test]: detect LEDB\n");
		return 4;
	}
	printf("[Messgase]: %s\n", rx_buf);
	return 0;
}

static void input_enable(char pin)
{
	gpio_input_en |= 1<<pin;
	printf("input_en register value: 0x%04x\n", gpio_input_en);
}

static uint32_t get_input_val(char pin)
{
	uint32_t mask =  1<<pin;
	uint32_t val = (gpio_input_val & mask) << pin;
	return val;
}

static void delay_s(int time)
{
    vTaskDelay( ( TickType_t )(1000*time) / portTICK_PERIOD_MS );
}

static void init_led(struct metal_gpio *gpio)
{
	gpio = metal_gpio_get_device(0);
	if(gpio == NULL)
	{
		printf("get gpio device failed\n");
	}

	metal_gpio_enable_output(gpio,RED);
	metal_gpio_enable_output(gpio,BLUE);
	metal_gpio_enable_output(gpio,GREEN);

//	metal_gpio_disable_input(gpio, ESP_CS);
//	metal_gpio_enable_output(gpio, ESP_CS);

//	metal_gpio_disable_input(gpio, WF_INT);

	metal_gpio_set_pin(gpio, RED, LED_ON);
	metal_gpio_set_pin(gpio, GREEN, LED_OFF);
	metal_gpio_set_pin(gpio, BLUE, LED_OFF);

}
