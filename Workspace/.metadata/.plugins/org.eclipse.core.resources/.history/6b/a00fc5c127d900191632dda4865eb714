/* Copyright 2019 SiFive, Inc */
/* SPDX-License-Identifier: Apache-2.0 */

#include <stdio.h>
#include <metal/led.h>
#include <metal/gpio.h>
#include <metal/timer.h>
#include <metal/spi.h>

#define ESP_CS	0
void delay(int number_of_seconds) //not actually number of seconds
{
    int milli_seconds = 1000 * number_of_seconds;
    clock_t start_time = clock();
    while (clock() < start_time + milli_seconds);
}

int main()
{
	struct metal_gpio* gpio1;
	struct metal_spi *spi;

	printf("Start Programe\n");
	gpio1 = metal_gpio_get_device(ESP_CS);
	spi = metal_spi_get_device(0);
	if(spi == NULL)
	{
		printf("Failed to get spi device\n");
		return 1;
	}
	else
	{
		printf("success to get spi device\n");
	}
	metal_spi_init(spi, 100000);

	/* CPOL = 0, CPHA = 0, MSB-first, CS active low */
	struct metal_spi_config config = {
		.protocol = METAL_SPI_SINGLE,
		.polarity = 0,
		.phase = 0,
		.little_endian = 0,
		.cs_active_high = 0,
		.csid = 0,
	};

	metal_gpio_enable_output(gpio1,ESP_CS);
	metal_gpio_set_pin(gpio1, ESP_CS, 1);

	char tx_buf[3] = {'A', 'T'};
	char rx_buf[3] = {0};
	printf("address rx buffer: 0x%02c\n", rx_buf);
	int spi_res;
	spi_res = metal_spi_transfer(spi, &config, 3, tx_buf, rx_buf);
	printf("address rx buffer: 0x%02x\nspi_res = %d\n", rx_buf, spi_res);

	while(1)
	{
		metal_gpio_set_pin(gpio1, ESP_CS, 1);
		delay(10000);
		metal_gpio_set_pin(gpio1, ESP_CS, 0);
		delay(10000);
	}

}
