/* Copyright 2018 SiFive, Inc */
/* SPDX-License-Identifier: Apache-2.0 */

#include <stdio.h>
#include "sifive_spi1.h"
#include <metal/machine/platform.h>

#ifdef METAL_SIFIVE_SPI1

#include <metal/io.h>
#include <metal/machine.h>
#include <time.h>

#include <metal/drivers/sifive_gpio0.h>
#include <metal/clock.h>
#include <metal/compiler.h>



/* Register fields */
#define METAL_SPI_SCKDIV_MASK         0xFFF

#define METAL_SPI_SCKMODE_PHA_SHIFT   0
#define METAL_SPI_SCKMODE_POL_SHIFT   1

#define METAL_SPI_CSMODE_MASK         3
#define METAL_SPI_CSMODE_AUTO         0
#define METAL_SPI_CSMODE_HOLD         2
#define METAL_SPI_CSMODE_OFF          3

#define METAL_SPI_PROTO_MASK          3
#define METAL_SPI_PROTO_SINGLE        0
#define METAL_SPI_PROTO_DUAL          1
#define METAL_SPI_PROTO_QUAD          2

#define METAL_SPI_ENDIAN_LSB          4

#define METAL_SPI_DISABLE_RX          8

#define METAL_SPI_FRAME_LEN_SHIFT     16
#define METAL_SPI_FRAME_LEN_MASK      (0xF << METAL_SPI_FRAME_LEN_SHIFT)

#define METAL_SPI_TXDATA_FULL         (1 << 31)
#define METAL_SPI_RXDATA_EMPTY        (1 << 31)
#define METAL_SPI_TXMARK_MASK         7
#define METAL_SPI_TXWM                1
#define METAL_SPI_TXRXDATA_MASK       (0xFF)

#define METAL_SPI_INTERVAL_SHIFT      16

#define METAL_SPI_CONTROL_IO          0
#define METAL_SPI_CONTROL_MAPPED      1

#define METAL_SPI_REG(offset)   (((unsigned long)control_base + offset))
#define METAL_SPI_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)METAL_SPI_REG(offset)))
#define METAL_SPI_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)METAL_SPI_REG(offset)))

#define METAL_SPI_RXDATA_TIMEOUT      1




/* --------------------- sifive_spi0 ------------ */
static inline unsigned long __metal_driver_sifive_spi1_control_base(struct metal_spi1 *spi);
static inline unsigned long __metal_driver_sifive_spi1_control_size(struct metal_spi1 *spi);
static inline struct metal_clock * __metal_driver_sifive_spi1_clock(struct metal_spi1 *spi);
static inline struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_spi1_pinmux(struct metal_spi1 *spi);
static inline unsigned long __metal_driver_sifive_spi1_pinmux_output_selector(struct metal_spi1 *spi);
static inline unsigned long __metal_driver_sifive_spi1_pinmux_source_selector(struct metal_spi1 *spi);


static unsigned long __metal_driver_sifive_spi1_control_base(struct metal_spi1 *spi)
{
	return METAL_SIFIVE_SPI0_10024000_BASE_ADDRESS;
}
static unsigned long __metal_driver_sifive_spi1_control_size(struct metal_spi1 *spi)
{
	return METAL_SIFIVE_SPI0_10024000_SIZE;
}
static struct metal_clock * __metal_driver_sifive_spi1_clock(struct metal_spi1 *spi)
{
	return (struct metal_clock *)&__metal_dt_clock_4.clock;
}
static struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_spi1_pinmux(struct metal_spi1 *spi)
{
	return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
}

static unsigned long __metal_driver_sifive_spi1_pinmux_output_selector(struct metal_spi1 *spi)
{
	return 60;
}
static unsigned long __metal_driver_sifive_spi1_pinmux_source_selector(struct metal_spi1 *spi)
{
	return 60;
}

static int configure_spi1(struct __metal_driver_sifive_spi1 *spi, struct metal_spi1_config *config)
{
    long control_base = __metal_driver_sifive_spi1_control_base((struct metal_spi1 *)spi);
    /* Set protocol */
    METAL_SPI_REGW(METAL_SIFIVE_SPI1_FMT) &= ~(METAL_SPI_PROTO_MASK);
//    switch(config->protocol) {
//        case METAL_SPI_SINGLE:
            METAL_SPI_REGW(METAL_SIFIVE_SPI1_FMT) |= METAL_SPI_PROTO_SINGLE;
//            break;
//        case METAL_SPI_DUAL:
//            METAL_SPI_REGW(METAL_SIFIVE_SPI1_FMT) |= METAL_SPI_PROTO_DUAL;
//            break;
//        case METAL_SPI_QUAD:
//            METAL_SPI_REGW(METAL_SIFIVE_SPI1_FMT) |= METAL_SPI_PROTO_QUAD;
//            break;
//        default:
//            /* Unsupported value */
//            return -1;
//    }

    /* Set Polarity */
    if(config->polarity) {
        METAL_SPI_REGW(METAL_SIFIVE_SPI1_SCKMODE) |= (1 << METAL_SPI_SCKMODE_PHA_SHIFT);
    } else {
        METAL_SPI_REGW(METAL_SIFIVE_SPI1_SCKMODE) &= ~(1 << METAL_SPI_SCKMODE_PHA_SHIFT);
    }

    /* Set Phase */
    if(config->phase) {
        METAL_SPI_REGW(METAL_SIFIVE_SPI1_SCKMODE) |= (1 << METAL_SPI_SCKMODE_POL_SHIFT);
    } else {
        METAL_SPI_REGW(METAL_SIFIVE_SPI1_SCKMODE) &= ~(1 << METAL_SPI_SCKMODE_POL_SHIFT);
    }

    /* Set Endianness */
    if(config->little_endian) {
        METAL_SPI_REGW(METAL_SIFIVE_SPI1_FMT) |= METAL_SPI_ENDIAN_LSB;
    } else {
        METAL_SPI_REGW(METAL_SIFIVE_SPI1_FMT) &= ~(METAL_SPI_ENDIAN_LSB);
    }

    /* Always populate receive FIFO */
    METAL_SPI_REGW(METAL_SIFIVE_SPI1_FMT) &= ~(METAL_SPI_DISABLE_RX);

    /* Set CS Active */
    if(config->cs_active_high) {
        METAL_SPI_REGW(METAL_SIFIVE_SPI1_CSDEF) = 0;
    } else {
        METAL_SPI_REGW(METAL_SIFIVE_SPI1_CSDEF) = 1;
    }

    /* Set frame length */
    if((METAL_SPI_REGW(METAL_SIFIVE_SPI1_FMT) & METAL_SPI_FRAME_LEN_MASK) != (8 << METAL_SPI_FRAME_LEN_SHIFT)) {
        METAL_SPI_REGW(METAL_SIFIVE_SPI1_FMT) &= ~(METAL_SPI_FRAME_LEN_MASK);
        METAL_SPI_REGW(METAL_SIFIVE_SPI1_FMT) |= (8 << METAL_SPI_FRAME_LEN_SHIFT);
    }

    /* Set CS line */
    METAL_SPI_REGW(METAL_SIFIVE_SPI1_CSID) = config->csid;

    /* Toggle off memory-mapped SPI flash mode, toggle on programmable IO mode
     * It seems that with this line uncommented, the debugger cannot have access
     * to the chip at all because it assumes the chip is in memory-mapped mode.
     * I have to compile the code with this line commented and launch gdb,
     * reset cores, reset $pc, set *((int *) 0x20004060) = 0, (set the flash
     * interface control register to programmable I/O mode) and then continue
     * Alternative, comment out the "flash" line in openocd.cfg */
    METAL_SPI_REGW(METAL_SIFIVE_SPI1_FCTRL) = METAL_SPI_CONTROL_IO;

    return 0;
}

int __metal_driver_sifive_spi1_transfer(struct metal_spi1 *gspi,
                                      struct metal_spi1_config *config,
                                      size_t len,
                                      char *tx_buf,
                                      char *rx_buf)
{
    struct __metal_driver_sifive_spi1 *spi = (void *)gspi;
    long control_base = __metal_driver_sifive_spi1_control_base(gspi);
    int rc = 0;

    rc = configure_spi1(spi, config);
    if(rc != 0) {
        return rc;
    }

    /* Hold the chip select line for all len transferred */
    METAL_SPI_REGW(METAL_SIFIVE_SPI1_CSMODE) &= ~(METAL_SPI_CSMODE_MASK);
    METAL_SPI_REGW(METAL_SIFIVE_SPI1_CSMODE) |= METAL_SPI_CSMODE_HOLD;

    unsigned long rxdata;

    /* Declare time_t variables to break out of infinite while loop */
    time_t endwait;

    for(size_t i = 0; i < len; i++) {
        /* Master send bytes to the slave */

        /* Wait for TXFIFO to not be full */
        while (METAL_SPI_REGW(METAL_SIFIVE_SPI1_TXDATA) & METAL_SPI_TXDATA_FULL);

        /* Transfer byte by modifying the least significant byte in the TXDATA register */
        if (tx_buf) {
            METAL_SPI_REGB(METAL_SIFIVE_SPI1_TXDATA) = tx_buf[i];
        } else {
            /* Transfer a 0 byte if the sending buffer is NULL */
            METAL_SPI_REGB(METAL_SIFIVE_SPI1_TXDATA) = 0;
        }

        /* Master receives bytes from the RX FIFO */

        /* Wait for RXFIFO to not be empty, but break the nested loops if timeout
         * this timeout method  needs refining, preferably taking into account
         * the device specs */
        endwait = time(NULL) + METAL_SPI_RXDATA_TIMEOUT;

        while ((rxdata = METAL_SPI_REGW(METAL_SIFIVE_SPI1_RXDATA)) & METAL_SPI_RXDATA_EMPTY) {
            if (time(NULL) > endwait) {
                /* If timeout, deassert the CS */
                METAL_SPI_REGW(METAL_SIFIVE_SPI1_CSMODE) &= ~(METAL_SPI_CSMODE_MASK);

                /* If timeout, return error code 1 immediately */
                return 1;
            }
        }

        /* Only store the dequeued byte if the receive_buffer is not NULL */
        if (rx_buf) {
            rx_buf[i] = (char) (rxdata & METAL_SPI_TXRXDATA_MASK);
        }
    }

    /* On the last byte, set CSMODE to auto so that the chip select transitions back to high
     * The reason that CS pin is not deasserted after transmitting out the byte buffer is timing.
     * The code on the host side likely executes faster than the ability of FIFO to send out bytes.
     * After the host iterates through the array, fifo is likely not cleared yet. If host deasserts
     * the CS pin immediately, the following bytes in the output FIFO will not be sent consecutively.
     * There needs to be a better way to handle this. */
    METAL_SPI_REGW(METAL_SIFIVE_SPI1_CSMODE) &= ~(METAL_SPI_CSMODE_MASK);

    return 0;
}

int __metal_driver_sifive_spi1_get_baud_rate(struct metal_spi1 *gspi)
{
    struct __metal_driver_sifive_spi1 *spi = (void *)gspi;
    return spi->baud_rate;
}

int __metal_driver_sifive_spi1_set_baud_rate(struct metal_spi1 *gspi, int baud_rate)
{
    long control_base = __metal_driver_sifive_spi1_control_base(gspi);
    struct metal_clock *clock = __metal_driver_sifive_spi1_clock(gspi);
    struct __metal_driver_sifive_spi1 *spi = (void *)gspi;

    spi->baud_rate = baud_rate;

    if (clock != NULL) {
        long clock_rate = clock->vtable->get_rate_hz(clock);

        /* Calculate divider */
        long div = (clock_rate / (2 * baud_rate)) - 1;

        if(div > METAL_SPI_SCKDIV_MASK) {
            /* The requested baud rate is lower than we can support at
             * the current clock rate */
            return -1;
        }
//	/* Reset value is div = 0x003 */
//        /* Set divider */
//        METAL_SPI_REGW(METAL_SIFIVE_SPI1_SCKDIV) &= ~METAL_SPI_SCKDIV_MASK;
//        METAL_SPI_REGW(METAL_SIFIVE_SPI1_SCKDIV) |= (div & METAL_SPI_SCKDIV_MASK);
    }

    return 0;
}

static void pre_rate_change_callback(void *priv)
{
    long control_base = __metal_driver_sifive_spi1_control_base((struct metal_spi1 *)priv);

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to zero and waiting until an interrupt is pending */
    METAL_SPI_REGW(METAL_SIFIVE_SPI1_TXMARK) &= ~(METAL_SPI_TXMARK_MASK);

    while((METAL_SPI_REGW(METAL_SIFIVE_SPI1_IP) & METAL_SPI_TXWM) == 0) ;
}

static void post_rate_change_callback(void *priv)
{
    struct __metal_driver_sifive_spi1 *spi = priv;
    metal_spi1_set_baud_rate(&spi->spi, spi->baud_rate);
}

void __metal_driver_sifive_spi1_init(struct metal_spi1 *gspi, int baud_rate)
{
    struct __metal_driver_sifive_spi1 *spi = (void *)(gspi);
    struct metal_clock *clock = __metal_driver_sifive_spi1_clock(gspi);
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_spi1_pinmux(gspi);

    if(clock != NULL) {
        metal_clock_register_pre_rate_change_callback(clock, &pre_rate_change_callback, spi);
        metal_clock_register_post_rate_change_callback(clock, &post_rate_change_callback, spi);
    }

    metal_spi1_set_baud_rate(&(spi->spi), baud_rate);

    if (pinmux != NULL) {
        long pinmux_output_selector = __metal_driver_sifive_spi1_pinmux_output_selector(gspi);
        long pinmux_source_selector = __metal_driver_sifive_spi1_pinmux_source_selector(gspi);
        pinmux->gpio.vtable->enable_io(
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}

__METAL_DEFINE_VTABLE(__metal_driver_vtable_sifive_spi1) = {
    .spi.init          = __metal_driver_sifive_spi1_init,
    .spi.transfer      = __metal_driver_sifive_spi1_transfer,
    .spi.get_baud_rate = __metal_driver_sifive_spi1_get_baud_rate,
    .spi.set_baud_rate = __metal_driver_sifive_spi1_set_baud_rate,
};
/* From spi@10024000 */
struct __metal_driver_sifive_spi1  __metal_dt_spi_10024000;


__asm__ (".weak __metal_spi1_table");
struct __metal_driver_sifive_spi1 *__metal_spi1_table[] = {
					0,
					&__metal_dt_spi_10024000};

extern inline void metal_spi1_init(struct metal_spi1 *spi, int baud_rate);
extern inline int metal_spi1_transfer(struct metal_spi1 *spi, struct metal_spi1_config *config, size_t len, char *tx_buf, char *rx_buf);
extern inline int metal_spi1_get_baud_rate(struct metal_spi1 *spi);
extern inline int metal_spi1_set_baud_rate(struct metal_spi1 *spi, int baud_rate);

struct metal_spi1 *metal_spi1_get_device(int device_num)
{
//    	return (struct metal_spi1 *) __metal_spi1_table[device_num];
	__metal_dt_spi_10024000.spi.vtable = &(__metal_driver_vtable_sifive_spi1.spi);
    return (struct metal_spi1 *) &__metal_dt_spi_10024000;
}

#include <stdio.h>
#include <string.h>
void spi1_test(void)
{
	printf("METAL SPI Driver Demo\n");

	struct metal_spi1 *spi ;
//	/* Get SPI 1 */
	spi = metal_spi1_get_device(1);


	if(spi == NULL) {
		printf("Failed to get spi1 device\n");
		while(1);
	}

	/* Initialize the SPI device to 100_000 baud */
	__metal_driver_sifive_spi1_init(spi, 2000000);




	struct metal_spi1_config config = {
		.protocol = 0,//METAL_SPI_SINGLE,
		.polarity = 0, //sckmode . The reset value is 0x0
		.phase = 0, // sckmode . The reset value is 0x0
		.little_endian = 0, // fmt. The reset value is 0x0
		.cs_active_high = 0, // csdef. The reset value is 0x0
		.csid = 0, // csid. The reset value is 0x0
	};

	while(1){
	/* Transfer three bytes */
	char tx_buf[4] = "AT\r\n";
	char rx_buf[4] = {0};

	metal_spi1_transfer(spi, &config, 4, tx_buf, rx_buf);
//	metal_spi1_transfer(spi, &config, strlen("AT+CWJAP=\"SHCVN02\",\"khongduoc\"\r\n"), "AT+CWJAP=\"SHCVN02\",\"khongduoc\"\r\n", NULL);
	spi->vtable->transfer(spi, &config, 4, tx_buf, rx_buf);
	spi->vtable->transfer(spi, &config, strlen("AT+CWJAP=\"SHCVN02\",\"khongduoc\"\r\n"), "AT+CWJAP=\"SHCVN02\",\"khongduoc\"\r\n", NULL);


	}
}


#endif /* METAL_SIFIVE_SPI1 */
